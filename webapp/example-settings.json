{
	"express-server": {
		"prefix": "express-server",
		"body": [
			"const express = require('express')",
			"const app = express()",
			"const port = 3000",
			"", 
			"app.get('/', (req, res) => {",
			"  res.send('Hello World!')",
			"})",
			"",
			"app.listen(port, () => {",
			"  console.log(`Example app listening on port`, port)",
			"})",
			""
		]
	},
    "web-component-tools": {
		"prefix": "web-component-tools",
		"body": [
			"const html = function (templates, ...values) {",
			"    const template = document.createElement('template')",
			"    let str = ''",
			"    templates.forEach((template, index) => {",
			"        str += template",
			"        str = values[index] ? str + values[index] : str",
			"    })",
			"    template.innerHTML = str.trim()",
			"    return template.content",
			"}",
			"",
			"html.import = async (htmlUrl) => {",
			"    const res = await (await fetch(htmlUrl, { headers: { 'Content-Type': 'text/html' } })).text()",
			"    return html`${res}`",
			"}",
			"",
			"const mapComponentEvents = (component, eventNames) => {",
			"    eventNames.map(eventName => {",
			"        toArray(component.shadowRoot.querySelectorAll(`[${eventName}]`))",
			"            .forEach(handled => {",
			"                const handlerName = handled.getAttribute(eventName)",
			"                handled.addEventListener(eventName.replace('on', ''), event => {",
			"                    component[handlerName](event)",
			"                    updateVars(component)",
			"                })",
			"                handled.removeAttribute(eventName)",
			"            })",
			"    })",
			"}",
			""
		]
	},
	"web-component": {
		"prefix": "web-component",
		"body": [
			"",
			"class $1 extends HTMLElement {",
			"",
			"    constructor() {",
			"        super()",
			"    }",
			"",
			"    async _render() {",
			"        const inner = html`<b>Hello There!</b>`",
			"        const shadow = this.attachShadow({mode: 'open'})",
			"        shadow.appendChild(inner)",
			"    }",
			"",
			"    // const inner = await html.import('test.component.html')",
			"",
			"    // replacing inline handler function with own component methods",
			"    mapComponentEvents(this, eventNames)",
			"",
			"    // get variable names",
			"    updateVars(this)",
			"",
			"",
			"    connectedCallback() { this._render() }",
			"",
			"    disconnectedCallback() { }",
			"",
			"    attributeChangedCallback(name, oldValue, newValue) { }",
			"",
			"    adoptedCallback() { }",
			"",
			"}",
			"",
			"window.customElements.define('$2', $1)",
			""
		]
	},
	"fn-lambda": {
		"prefix": "fn-lambda",
		"body": [
			"function () {",
			"  const { log, error } = console",
			"  // @ts-ignore,",
			"  exports.handler = async function (event, context) {",
			"    log(JSON.stringify(event, undefined, 2))",
			"    return {",
			"      statusCode: 200,",
			"      body: JSON.stringify(event.body),",
			"      headers: {",
			"        'content-type': 'application/json',",
			"        'Access-Controll-Allowed-Origins': '*',",
			"        'Access-Controll-Allowed-Headers': 'Content-Type',",
			"        'Access-Controll-Allowed-Methods': 'OPTIONS,GET,POST,PUT,PATCH,DELETE,HEAD'",
			"      }",
			"    }",
			"  }",
			"}"
		]
	}
}